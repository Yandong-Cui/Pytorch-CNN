import os

from PIL import Image
from torch.utils.data import Dataset
from torchvision  import transforms
from torch.utils.tensorboard import SummaryWriter
import one_hot
class mydatasets(Dataset):
    def __init__(self,root_dir):
       super(mydatasets, self).__init__()
       self.list_image_path=[ os.path.join(root_dir,image_name) for image_name in os.listdir(root_dir)]
       #self.list_image_path遍历到文件夹中的每个图片的具体路径（包含文件名）⬆
       #⬇调整图片，便于后续操作---其中一个重要准话就是将图片信息转为tensor格式，否则神经网络识别不了--transforms
       self.transforms=transforms.Compose([
           transforms.Resize((60,160)),
           transforms.ToTensor(),
           transforms.Grayscale()

       ])
    def __getitem__(self, index):
        image_path = self.list_image_path[index]
        img_ = Image.open(image_path)
        image_name=image_path.split("\\")[-1]   #通过上面得到的路径取出里面文件名
        img_tesor=self.transforms(img_)
        img_lable=image_name.split("_")[0]   #取当前文件（图片）的实际验证码内容
        img_lable=one_hot.text2vec(img_lable)
        img_lable=img_lable.view(1,-1)[0]    #把4*36的数组展平成144的
        return img_tesor,img_lable
    def __len__(self):
        return self.list_image_path.__len__()   #返回当前文件夹下数据的个数



if __name__ == '__main__':

    d=mydatasets("D:\\app for myself\\pycharm\\验证码识别\\Bili\\train")
    img,label=d[0]
    writer=SummaryWriter("logs")
#⬆创建一个 SummaryWriter 对象，用于将数据写入到 TensorBoard 的日志文件中。TensorBoard 是一个可视化工具，可以用来展示 PyTorch 模型的训练过程、性能指标等信息。
    writer.add_image("img",img,1)
    print(img,img.shape,label,label.shape)    #img就是转化成tensor格式的图片信息
    writer.close()

    #
